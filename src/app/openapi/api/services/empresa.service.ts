/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { actualizarEmpresa$Json } from '../fn/empresa/actualizar-empresa-json';
import { ActualizarEmpresa$Json$Params } from '../fn/empresa/actualizar-empresa-json';
import { actualizarEmpresa$Plain } from '../fn/empresa/actualizar-empresa-plain';
import { ActualizarEmpresa$Plain$Params } from '../fn/empresa/actualizar-empresa-plain';
import { crearEmpresa$Json } from '../fn/empresa/crear-empresa-json';
import { CrearEmpresa$Json$Params } from '../fn/empresa/crear-empresa-json';
import { crearEmpresa$Plain } from '../fn/empresa/crear-empresa-plain';
import { CrearEmpresa$Plain$Params } from '../fn/empresa/crear-empresa-plain';
import { CrearEmpresaDtoApiResponse } from '../models/crear-empresa-dto-api-response';
import { EmpresaPlantaDtoListApiResponse } from '../models/empresa-planta-dto-list-api-response';
import { EmpresaProveedorDtoListApiResponse } from '../models/empresa-proveedor-dto-list-api-response';
import { getAllEmpresas$Json } from '../fn/empresa/get-all-empresas-json';
import { GetAllEmpresas$Json$Params } from '../fn/empresa/get-all-empresas-json';
import { getAllEmpresas$Plain } from '../fn/empresa/get-all-empresas-plain';
import { GetAllEmpresas$Plain$Params } from '../fn/empresa/get-all-empresas-plain';
import { getAllPlantas$Json } from '../fn/empresa/get-all-plantas-json';
import { GetAllPlantas$Json$Params } from '../fn/empresa/get-all-plantas-json';
import { getAllPlantas$Plain } from '../fn/empresa/get-all-plantas-plain';
import { GetAllPlantas$Plain$Params } from '../fn/empresa/get-all-plantas-plain';
import { getAllProveedores$Json } from '../fn/empresa/get-all-proveedores-json';
import { GetAllProveedores$Json$Params } from '../fn/empresa/get-all-proveedores-json';
import { getAllProveedores$Plain } from '../fn/empresa/get-all-proveedores-plain';
import { GetAllProveedores$Plain$Params } from '../fn/empresa/get-all-proveedores-plain';
import { getEmpresaByEmpresa$Json } from '../fn/empresa/get-empresa-by-empresa-json';
import { GetEmpresaByEmpresa$Json$Params } from '../fn/empresa/get-empresa-by-empresa-json';
import { getEmpresaByEmpresa$Plain } from '../fn/empresa/get-empresa-by-empresa-plain';
import { GetEmpresaByEmpresa$Plain$Params } from '../fn/empresa/get-empresa-by-empresa-plain';
import { getEmpresaPlanta$Json } from '../fn/empresa/get-empresa-planta-json';
import { GetEmpresaPlanta$Json$Params } from '../fn/empresa/get-empresa-planta-json';
import { getEmpresaPlanta$Plain } from '../fn/empresa/get-empresa-planta-plain';
import { GetEmpresaPlanta$Plain$Params } from '../fn/empresa/get-empresa-planta-plain';
import { getEmpresaProveedores$Json } from '../fn/empresa/get-empresa-proveedores-json';
import { GetEmpresaProveedores$Json$Params } from '../fn/empresa/get-empresa-proveedores-json';
import { getEmpresaProveedores$Plain } from '../fn/empresa/get-empresa-proveedores-plain';
import { GetEmpresaProveedores$Plain$Params } from '../fn/empresa/get-empresa-proveedores-plain';
import { guardaRelacionEmpresaPlanta$Json } from '../fn/empresa/guarda-relacion-empresa-planta-json';
import { GuardaRelacionEmpresaPlanta$Json$Params } from '../fn/empresa/guarda-relacion-empresa-planta-json';
import { guardaRelacionEmpresaPlanta$Plain } from '../fn/empresa/guarda-relacion-empresa-planta-plain';
import { GuardaRelacionEmpresaPlanta$Plain$Params } from '../fn/empresa/guarda-relacion-empresa-planta-plain';
import { guardaRelacionEmpresaProveedor$Json } from '../fn/empresa/guarda-relacion-empresa-proveedor-json';
import { GuardaRelacionEmpresaProveedor$Json$Params } from '../fn/empresa/guarda-relacion-empresa-proveedor-json';
import { guardaRelacionEmpresaProveedor$Plain } from '../fn/empresa/guarda-relacion-empresa-proveedor-plain';
import { GuardaRelacionEmpresaProveedor$Plain$Params } from '../fn/empresa/guarda-relacion-empresa-proveedor-plain';
import { ListaEmpresasDtoApiResponse } from '../models/lista-empresas-dto-api-response';
import { ListaEmpresasDtoListApiResponse } from '../models/lista-empresas-dto-list-api-response';
import { ListaPlantaDtoListApiResponse } from '../models/lista-planta-dto-list-api-response';
import { ListaProveedoresDtoListApiResponse } from '../models/lista-proveedores-dto-list-api-response';

@Injectable({ providedIn: 'root' })
export class EmpresaService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `crearEmpresa()` */
  static readonly CrearEmpresaPath = '/api/Empresa/CrearEmpresa';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `crearEmpresa$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  crearEmpresa$Plain$Response(params?: CrearEmpresa$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearEmpresaDtoApiResponse>> {
    return crearEmpresa$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `crearEmpresa$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  crearEmpresa$Plain(params?: CrearEmpresa$Plain$Params, context?: HttpContext): Observable<CrearEmpresaDtoApiResponse> {
    return this.crearEmpresa$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearEmpresaDtoApiResponse>): CrearEmpresaDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `crearEmpresa$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  crearEmpresa$Json$Response(params?: CrearEmpresa$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearEmpresaDtoApiResponse>> {
    return crearEmpresa$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `crearEmpresa$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  crearEmpresa$Json(params?: CrearEmpresa$Json$Params, context?: HttpContext): Observable<CrearEmpresaDtoApiResponse> {
    return this.crearEmpresa$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearEmpresaDtoApiResponse>): CrearEmpresaDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `actualizarEmpresa()` */
  static readonly ActualizarEmpresaPath = '/api/Empresa/ActualizarEmpresa';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actualizarEmpresa$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarEmpresa$Plain$Response(params?: ActualizarEmpresa$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearEmpresaDtoApiResponse>> {
    return actualizarEmpresa$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actualizarEmpresa$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarEmpresa$Plain(params?: ActualizarEmpresa$Plain$Params, context?: HttpContext): Observable<CrearEmpresaDtoApiResponse> {
    return this.actualizarEmpresa$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearEmpresaDtoApiResponse>): CrearEmpresaDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actualizarEmpresa$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarEmpresa$Json$Response(params?: ActualizarEmpresa$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearEmpresaDtoApiResponse>> {
    return actualizarEmpresa$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actualizarEmpresa$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarEmpresa$Json(params?: ActualizarEmpresa$Json$Params, context?: HttpContext): Observable<CrearEmpresaDtoApiResponse> {
    return this.actualizarEmpresa$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearEmpresaDtoApiResponse>): CrearEmpresaDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `getEmpresaByEmpresa()` */
  static readonly GetEmpresaByEmpresaPath = '/api/Empresa/GetEmpresaByEmpresa';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmpresaByEmpresa$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaByEmpresa$Plain$Response(params?: GetEmpresaByEmpresa$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaEmpresasDtoApiResponse>> {
    return getEmpresaByEmpresa$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmpresaByEmpresa$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaByEmpresa$Plain(params?: GetEmpresaByEmpresa$Plain$Params, context?: HttpContext): Observable<ListaEmpresasDtoApiResponse> {
    return this.getEmpresaByEmpresa$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaEmpresasDtoApiResponse>): ListaEmpresasDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmpresaByEmpresa$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaByEmpresa$Json$Response(params?: GetEmpresaByEmpresa$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaEmpresasDtoApiResponse>> {
    return getEmpresaByEmpresa$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmpresaByEmpresa$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaByEmpresa$Json(params?: GetEmpresaByEmpresa$Json$Params, context?: HttpContext): Observable<ListaEmpresasDtoApiResponse> {
    return this.getEmpresaByEmpresa$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaEmpresasDtoApiResponse>): ListaEmpresasDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `getAllEmpresas()` */
  static readonly GetAllEmpresasPath = '/api/Empresa/GetAllEmpresas';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllEmpresas$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmpresas$Plain$Response(params?: GetAllEmpresas$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaEmpresasDtoListApiResponse>> {
    return getAllEmpresas$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllEmpresas$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmpresas$Plain(params?: GetAllEmpresas$Plain$Params, context?: HttpContext): Observable<ListaEmpresasDtoListApiResponse> {
    return this.getAllEmpresas$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaEmpresasDtoListApiResponse>): ListaEmpresasDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllEmpresas$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmpresas$Json$Response(params?: GetAllEmpresas$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaEmpresasDtoListApiResponse>> {
    return getAllEmpresas$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllEmpresas$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllEmpresas$Json(params?: GetAllEmpresas$Json$Params, context?: HttpContext): Observable<ListaEmpresasDtoListApiResponse> {
    return this.getAllEmpresas$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaEmpresasDtoListApiResponse>): ListaEmpresasDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `getEmpresaPlanta()` */
  static readonly GetEmpresaPlantaPath = '/api/Empresa/GetEmpresaPlanta';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmpresaPlanta$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaPlanta$Plain$Response(params?: GetEmpresaPlanta$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EmpresaPlantaDtoListApiResponse>> {
    return getEmpresaPlanta$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmpresaPlanta$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaPlanta$Plain(params?: GetEmpresaPlanta$Plain$Params, context?: HttpContext): Observable<EmpresaPlantaDtoListApiResponse> {
    return this.getEmpresaPlanta$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmpresaPlantaDtoListApiResponse>): EmpresaPlantaDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmpresaPlanta$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaPlanta$Json$Response(params?: GetEmpresaPlanta$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<EmpresaPlantaDtoListApiResponse>> {
    return getEmpresaPlanta$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmpresaPlanta$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaPlanta$Json(params?: GetEmpresaPlanta$Json$Params, context?: HttpContext): Observable<EmpresaPlantaDtoListApiResponse> {
    return this.getEmpresaPlanta$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmpresaPlantaDtoListApiResponse>): EmpresaPlantaDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `getAllPlantas()` */
  static readonly GetAllPlantasPath = '/api/Empresa/GetAllPlantas';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPlantas$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPlantas$Plain$Response(params?: GetAllPlantas$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaPlantaDtoListApiResponse>> {
    return getAllPlantas$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPlantas$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPlantas$Plain(params?: GetAllPlantas$Plain$Params, context?: HttpContext): Observable<ListaPlantaDtoListApiResponse> {
    return this.getAllPlantas$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaPlantaDtoListApiResponse>): ListaPlantaDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPlantas$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPlantas$Json$Response(params?: GetAllPlantas$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaPlantaDtoListApiResponse>> {
    return getAllPlantas$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPlantas$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPlantas$Json(params?: GetAllPlantas$Json$Params, context?: HttpContext): Observable<ListaPlantaDtoListApiResponse> {
    return this.getAllPlantas$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaPlantaDtoListApiResponse>): ListaPlantaDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `guardaRelacionEmpresaPlanta()` */
  static readonly GuardaRelacionEmpresaPlantaPath = '/api/Empresa/GuardaRelacionEmpresaPlanta';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `guardaRelacionEmpresaPlanta$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionEmpresaPlanta$Plain$Response(params?: GuardaRelacionEmpresaPlanta$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return guardaRelacionEmpresaPlanta$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `guardaRelacionEmpresaPlanta$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionEmpresaPlanta$Plain(params?: GuardaRelacionEmpresaPlanta$Plain$Params, context?: HttpContext): Observable<boolean> {
    return this.guardaRelacionEmpresaPlanta$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `guardaRelacionEmpresaPlanta$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionEmpresaPlanta$Json$Response(params?: GuardaRelacionEmpresaPlanta$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return guardaRelacionEmpresaPlanta$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `guardaRelacionEmpresaPlanta$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionEmpresaPlanta$Json(params?: GuardaRelacionEmpresaPlanta$Json$Params, context?: HttpContext): Observable<boolean> {
    return this.guardaRelacionEmpresaPlanta$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `getAllProveedores()` */
  static readonly GetAllProveedoresPath = '/api/Empresa/GetAllProveedores';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProveedores$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProveedores$Plain$Response(params?: GetAllProveedores$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaProveedoresDtoListApiResponse>> {
    return getAllProveedores$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProveedores$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProveedores$Plain(params?: GetAllProveedores$Plain$Params, context?: HttpContext): Observable<ListaProveedoresDtoListApiResponse> {
    return this.getAllProveedores$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaProveedoresDtoListApiResponse>): ListaProveedoresDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProveedores$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProveedores$Json$Response(params?: GetAllProveedores$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaProveedoresDtoListApiResponse>> {
    return getAllProveedores$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProveedores$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProveedores$Json(params?: GetAllProveedores$Json$Params, context?: HttpContext): Observable<ListaProveedoresDtoListApiResponse> {
    return this.getAllProveedores$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaProveedoresDtoListApiResponse>): ListaProveedoresDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `getEmpresaProveedores()` */
  static readonly GetEmpresaProveedoresPath = '/api/Empresa/GetEmpresaProveedores';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmpresaProveedores$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaProveedores$Plain$Response(params?: GetEmpresaProveedores$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<EmpresaProveedorDtoListApiResponse>> {
    return getEmpresaProveedores$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmpresaProveedores$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaProveedores$Plain(params?: GetEmpresaProveedores$Plain$Params, context?: HttpContext): Observable<EmpresaProveedorDtoListApiResponse> {
    return this.getEmpresaProveedores$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmpresaProveedorDtoListApiResponse>): EmpresaProveedorDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getEmpresaProveedores$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaProveedores$Json$Response(params?: GetEmpresaProveedores$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<EmpresaProveedorDtoListApiResponse>> {
    return getEmpresaProveedores$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getEmpresaProveedores$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getEmpresaProveedores$Json(params?: GetEmpresaProveedores$Json$Params, context?: HttpContext): Observable<EmpresaProveedorDtoListApiResponse> {
    return this.getEmpresaProveedores$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<EmpresaProveedorDtoListApiResponse>): EmpresaProveedorDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `guardaRelacionEmpresaProveedor()` */
  static readonly GuardaRelacionEmpresaProveedorPath = '/api/Empresa/GuardaRelacionEmpresaProveedor';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `guardaRelacionEmpresaProveedor$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionEmpresaProveedor$Plain$Response(params?: GuardaRelacionEmpresaProveedor$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return guardaRelacionEmpresaProveedor$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `guardaRelacionEmpresaProveedor$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionEmpresaProveedor$Plain(params?: GuardaRelacionEmpresaProveedor$Plain$Params, context?: HttpContext): Observable<boolean> {
    return this.guardaRelacionEmpresaProveedor$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `guardaRelacionEmpresaProveedor$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionEmpresaProveedor$Json$Response(params?: GuardaRelacionEmpresaProveedor$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return guardaRelacionEmpresaProveedor$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `guardaRelacionEmpresaProveedor$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionEmpresaProveedor$Json(params?: GuardaRelacionEmpresaProveedor$Json$Params, context?: HttpContext): Observable<boolean> {
    return this.guardaRelacionEmpresaProveedor$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
