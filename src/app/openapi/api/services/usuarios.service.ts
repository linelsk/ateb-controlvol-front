/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { actualizarPassword$Json } from '../fn/usuarios/actualizar-password-json';
import { ActualizarPassword$Json$Params } from '../fn/usuarios/actualizar-password-json';
import { actualizarPassword$Plain } from '../fn/usuarios/actualizar-password-plain';
import { ActualizarPassword$Plain$Params } from '../fn/usuarios/actualizar-password-plain';
import { actualizarUsuario$Json } from '../fn/usuarios/actualizar-usuario-json';
import { ActualizarUsuario$Json$Params } from '../fn/usuarios/actualizar-usuario-json';
import { actualizarUsuario$Plain } from '../fn/usuarios/actualizar-usuario-plain';
import { ActualizarUsuario$Plain$Params } from '../fn/usuarios/actualizar-usuario-plain';
import { crearUsuario$Json } from '../fn/usuarios/crear-usuario-json';
import { CrearUsuario$Json$Params } from '../fn/usuarios/crear-usuario-json';
import { crearUsuario$Plain } from '../fn/usuarios/crear-usuario-plain';
import { CrearUsuario$Plain$Params } from '../fn/usuarios/crear-usuario-plain';
import { CrearUsuarioDtoApiResponse } from '../models/crear-usuario-dto-api-response';
import { CrearUsuarioPlantaDtoListApiResponse } from '../models/crear-usuario-planta-dto-list-api-response';
import { eliminarCliente$Json } from '../fn/usuarios/eliminar-cliente-json';
import { EliminarCliente$Json$Params } from '../fn/usuarios/eliminar-cliente-json';
import { eliminarCliente$Plain } from '../fn/usuarios/eliminar-cliente-plain';
import { EliminarCliente$Plain$Params } from '../fn/usuarios/eliminar-cliente-plain';
import { getAllUsers$Json } from '../fn/usuarios/get-all-users-json';
import { GetAllUsers$Json$Params } from '../fn/usuarios/get-all-users-json';
import { getAllUsers$Plain } from '../fn/usuarios/get-all-users-plain';
import { GetAllUsers$Plain$Params } from '../fn/usuarios/get-all-users-plain';
import { getPlantasByUsuario$Json } from '../fn/usuarios/get-plantas-by-usuario-json';
import { GetPlantasByUsuario$Json$Params } from '../fn/usuarios/get-plantas-by-usuario-json';
import { getPlantasByUsuario$Plain } from '../fn/usuarios/get-plantas-by-usuario-plain';
import { GetPlantasByUsuario$Plain$Params } from '../fn/usuarios/get-plantas-by-usuario-plain';
import { getUserByEmail$Json } from '../fn/usuarios/get-user-by-email-json';
import { GetUserByEmail$Json$Params } from '../fn/usuarios/get-user-by-email-json';
import { getUserByEmail$Plain } from '../fn/usuarios/get-user-by-email-plain';
import { GetUserByEmail$Plain$Params } from '../fn/usuarios/get-user-by-email-plain';
import { getUserById$Json } from '../fn/usuarios/get-user-by-id-json';
import { GetUserById$Json$Params } from '../fn/usuarios/get-user-by-id-json';
import { getUserById$Plain } from '../fn/usuarios/get-user-by-id-plain';
import { GetUserById$Plain$Params } from '../fn/usuarios/get-user-by-id-plain';
import { GetUsuarioDtoListApiResponse } from '../models/get-usuario-dto-list-api-response';
import { guardaRelacionUsuarioPlanta$Json } from '../fn/usuarios/guarda-relacion-usuario-planta-json';
import { GuardaRelacionUsuarioPlanta$Json$Params } from '../fn/usuarios/guarda-relacion-usuario-planta-json';
import { guardaRelacionUsuarioPlanta$Plain } from '../fn/usuarios/guarda-relacion-usuario-planta-plain';
import { GuardaRelacionUsuarioPlanta$Plain$Params } from '../fn/usuarios/guarda-relacion-usuario-planta-plain';
import { ListaUsuarioPlantaListApiResponse } from '../models/lista-usuario-planta-list-api-response';
import { UsuarioDtoListApiResponse } from '../models/usuario-dto-list-api-response';

@Injectable({ providedIn: 'root' })
export class UsuariosService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/api/Usuarios/GetAllUsers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Plain$Response(params?: GetAllUsers$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaUsuarioPlantaListApiResponse>> {
    return getAllUsers$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Plain(params?: GetAllUsers$Plain$Params, context?: HttpContext): Observable<ListaUsuarioPlantaListApiResponse> {
    return this.getAllUsers$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaUsuarioPlantaListApiResponse>): ListaUsuarioPlantaListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Json$Response(params?: GetAllUsers$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<ListaUsuarioPlantaListApiResponse>> {
    return getAllUsers$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Json(params?: GetAllUsers$Json$Params, context?: HttpContext): Observable<ListaUsuarioPlantaListApiResponse> {
    return this.getAllUsers$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<ListaUsuarioPlantaListApiResponse>): ListaUsuarioPlantaListApiResponse => r.body)
    );
  }

  /** Path part for operation `getUserByEmail()` */
  static readonly GetUserByEmailPath = '/api/Usuarios/GetUserByEmail';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserByEmail$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByEmail$Plain$Response(params?: GetUserByEmail$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UsuarioDtoListApiResponse>> {
    return getUserByEmail$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserByEmail$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByEmail$Plain(params?: GetUserByEmail$Plain$Params, context?: HttpContext): Observable<UsuarioDtoListApiResponse> {
    return this.getUserByEmail$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UsuarioDtoListApiResponse>): UsuarioDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserByEmail$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByEmail$Json$Response(params?: GetUserByEmail$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UsuarioDtoListApiResponse>> {
    return getUserByEmail$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserByEmail$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserByEmail$Json(params?: GetUserByEmail$Json$Params, context?: HttpContext): Observable<UsuarioDtoListApiResponse> {
    return this.getUserByEmail$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UsuarioDtoListApiResponse>): UsuarioDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `getUserById()` */
  static readonly GetUserByIdPath = '/api/Usuarios/GetUserByID';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserById$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Plain$Response(params?: GetUserById$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<GetUsuarioDtoListApiResponse>> {
    return getUserById$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserById$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Plain(params?: GetUserById$Plain$Params, context?: HttpContext): Observable<GetUsuarioDtoListApiResponse> {
    return this.getUserById$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<GetUsuarioDtoListApiResponse>): GetUsuarioDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserById$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Json$Response(params?: GetUserById$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<GetUsuarioDtoListApiResponse>> {
    return getUserById$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserById$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Json(params?: GetUserById$Json$Params, context?: HttpContext): Observable<GetUsuarioDtoListApiResponse> {
    return this.getUserById$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<GetUsuarioDtoListApiResponse>): GetUsuarioDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `crearUsuario()` */
  static readonly CrearUsuarioPath = '/api/Usuarios/CrearUsuario';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `crearUsuario$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  crearUsuario$Plain$Response(params?: CrearUsuario$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioDtoApiResponse>> {
    return crearUsuario$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `crearUsuario$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  crearUsuario$Plain(params?: CrearUsuario$Plain$Params, context?: HttpContext): Observable<CrearUsuarioDtoApiResponse> {
    return this.crearUsuario$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioDtoApiResponse>): CrearUsuarioDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `crearUsuario$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  crearUsuario$Json$Response(params?: CrearUsuario$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioDtoApiResponse>> {
    return crearUsuario$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `crearUsuario$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  crearUsuario$Json(params?: CrearUsuario$Json$Params, context?: HttpContext): Observable<CrearUsuarioDtoApiResponse> {
    return this.crearUsuario$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioDtoApiResponse>): CrearUsuarioDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `actualizarUsuario()` */
  static readonly ActualizarUsuarioPath = '/api/Usuarios/ActualizarUsuario';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actualizarUsuario$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarUsuario$Plain$Response(params?: ActualizarUsuario$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioDtoApiResponse>> {
    return actualizarUsuario$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actualizarUsuario$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarUsuario$Plain(params?: ActualizarUsuario$Plain$Params, context?: HttpContext): Observable<CrearUsuarioDtoApiResponse> {
    return this.actualizarUsuario$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioDtoApiResponse>): CrearUsuarioDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actualizarUsuario$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarUsuario$Json$Response(params?: ActualizarUsuario$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioDtoApiResponse>> {
    return actualizarUsuario$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actualizarUsuario$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarUsuario$Json(params?: ActualizarUsuario$Json$Params, context?: HttpContext): Observable<CrearUsuarioDtoApiResponse> {
    return this.actualizarUsuario$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioDtoApiResponse>): CrearUsuarioDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `actualizarPassword()` */
  static readonly ActualizarPasswordPath = '/api/Usuarios/ActualizarPassword';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actualizarPassword$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarPassword$Plain$Response(params?: ActualizarPassword$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioDtoApiResponse>> {
    return actualizarPassword$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actualizarPassword$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarPassword$Plain(params?: ActualizarPassword$Plain$Params, context?: HttpContext): Observable<CrearUsuarioDtoApiResponse> {
    return this.actualizarPassword$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioDtoApiResponse>): CrearUsuarioDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `actualizarPassword$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarPassword$Json$Response(params?: ActualizarPassword$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioDtoApiResponse>> {
    return actualizarPassword$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `actualizarPassword$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  actualizarPassword$Json(params?: ActualizarPassword$Json$Params, context?: HttpContext): Observable<CrearUsuarioDtoApiResponse> {
    return this.actualizarPassword$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioDtoApiResponse>): CrearUsuarioDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `eliminarCliente()` */
  static readonly EliminarClientePath = '/api/Usuarios/EliminarCliente';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `eliminarCliente$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarCliente$Plain$Response(params?: EliminarCliente$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioDtoApiResponse>> {
    return eliminarCliente$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `eliminarCliente$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarCliente$Plain(params?: EliminarCliente$Plain$Params, context?: HttpContext): Observable<CrearUsuarioDtoApiResponse> {
    return this.eliminarCliente$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioDtoApiResponse>): CrearUsuarioDtoApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `eliminarCliente$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarCliente$Json$Response(params?: EliminarCliente$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioDtoApiResponse>> {
    return eliminarCliente$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `eliminarCliente$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  eliminarCliente$Json(params?: EliminarCliente$Json$Params, context?: HttpContext): Observable<CrearUsuarioDtoApiResponse> {
    return this.eliminarCliente$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioDtoApiResponse>): CrearUsuarioDtoApiResponse => r.body)
    );
  }

  /** Path part for operation `getPlantasByUsuario()` */
  static readonly GetPlantasByUsuarioPath = '/api/Usuarios/GetPlantasByUsuario';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPlantasByUsuario$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPlantasByUsuario$Plain$Response(params?: GetPlantasByUsuario$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioPlantaDtoListApiResponse>> {
    return getPlantasByUsuario$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPlantasByUsuario$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPlantasByUsuario$Plain(params?: GetPlantasByUsuario$Plain$Params, context?: HttpContext): Observable<CrearUsuarioPlantaDtoListApiResponse> {
    return this.getPlantasByUsuario$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioPlantaDtoListApiResponse>): CrearUsuarioPlantaDtoListApiResponse => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPlantasByUsuario$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPlantasByUsuario$Json$Response(params?: GetPlantasByUsuario$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<CrearUsuarioPlantaDtoListApiResponse>> {
    return getPlantasByUsuario$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPlantasByUsuario$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPlantasByUsuario$Json(params?: GetPlantasByUsuario$Json$Params, context?: HttpContext): Observable<CrearUsuarioPlantaDtoListApiResponse> {
    return this.getPlantasByUsuario$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<CrearUsuarioPlantaDtoListApiResponse>): CrearUsuarioPlantaDtoListApiResponse => r.body)
    );
  }

  /** Path part for operation `guardaRelacionUsuarioPlanta()` */
  static readonly GuardaRelacionUsuarioPlantaPath = '/api/Usuarios/GuardaRelacionUsuarioPlanta';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `guardaRelacionUsuarioPlanta$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionUsuarioPlanta$Plain$Response(params?: GuardaRelacionUsuarioPlanta$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return guardaRelacionUsuarioPlanta$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `guardaRelacionUsuarioPlanta$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionUsuarioPlanta$Plain(params?: GuardaRelacionUsuarioPlanta$Plain$Params, context?: HttpContext): Observable<boolean> {
    return this.guardaRelacionUsuarioPlanta$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `guardaRelacionUsuarioPlanta$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionUsuarioPlanta$Json$Response(params?: GuardaRelacionUsuarioPlanta$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return guardaRelacionUsuarioPlanta$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `guardaRelacionUsuarioPlanta$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  guardaRelacionUsuarioPlanta$Json(params?: GuardaRelacionUsuarioPlanta$Json$Params, context?: HttpContext): Observable<boolean> {
    return this.guardaRelacionUsuarioPlanta$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

}
